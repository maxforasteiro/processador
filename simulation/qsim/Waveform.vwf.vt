// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2017 20:21:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processing_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processing_unit_vlg_sample_tst(
	button_clock,
	clock_50,
	reset,
	switches,
	sampler_tx
);
input  button_clock;
input  clock_50;
input  reset;
input [17:0] switches;
output sampler_tx;

reg sample;
time current_time;
always @(button_clock or clock_50 or reset or switches)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processing_unit_vlg_check_tst (
	display_0,
	display_1,
	display_2,
	display_3,
	display_4,
	display_5,
	display_6,
	display_7,
	flag_write,
	test0,
	test1,
	test2,
	test3,
	sampler_rx
);
input [6:0] display_0;
input [6:0] display_1;
input [6:0] display_2;
input [6:0] display_3;
input [6:0] display_4;
input [6:0] display_5;
input [6:0] display_6;
input [6:0] display_7;
input  flag_write;
input [31:0] test0;
input [31:0] test1;
input [31:0] test2;
input [31:0] test3;
input sampler_rx;

reg [6:0] display_0_expected;
reg [6:0] display_1_expected;
reg [6:0] display_2_expected;
reg [6:0] display_3_expected;
reg [6:0] display_4_expected;
reg [6:0] display_5_expected;
reg [6:0] display_6_expected;
reg [6:0] display_7_expected;
reg  flag_write_expected;
reg [31:0] test0_expected;
reg [31:0] test1_expected;
reg [31:0] test2_expected;
reg [31:0] test3_expected;

reg [6:0] display_0_prev;
reg [6:0] display_1_prev;
reg [6:0] display_2_prev;
reg [6:0] display_3_prev;
reg [6:0] display_4_prev;
reg [6:0] display_5_prev;
reg [6:0] display_6_prev;
reg [6:0] display_7_prev;
reg  flag_write_prev;
reg [31:0] test0_prev;
reg [31:0] test1_prev;
reg [31:0] test2_prev;
reg [31:0] test3_prev;

reg [6:0] display_0_expected_prev;
reg [6:0] display_1_expected_prev;
reg [6:0] display_2_expected_prev;
reg [6:0] display_3_expected_prev;
reg [6:0] display_4_expected_prev;
reg [6:0] display_5_expected_prev;
reg [6:0] display_6_expected_prev;
reg [6:0] display_7_expected_prev;
reg  flag_write_expected_prev;
reg [31:0] test0_expected_prev;
reg [31:0] test1_expected_prev;
reg [31:0] test2_expected_prev;
reg [31:0] test3_expected_prev;

reg [6:0] last_display_0_exp;
reg [6:0] last_display_1_exp;
reg [6:0] last_display_2_exp;
reg [6:0] last_display_3_exp;
reg [6:0] last_display_4_exp;
reg [6:0] last_display_5_exp;
reg [6:0] last_display_6_exp;
reg [6:0] last_display_7_exp;
reg  last_flag_write_exp;
reg [31:0] last_test0_exp;
reg [31:0] last_test1_exp;
reg [31:0] last_test2_exp;
reg [31:0] last_test3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	display_0_prev = display_0;
	display_1_prev = display_1;
	display_2_prev = display_2;
	display_3_prev = display_3;
	display_4_prev = display_4;
	display_5_prev = display_5;
	display_6_prev = display_6;
	display_7_prev = display_7;
	flag_write_prev = flag_write;
	test0_prev = test0;
	test1_prev = test1;
	test2_prev = test2;
	test3_prev = test3;
end

// update expected /o prevs

always @(trigger)
begin
	display_0_expected_prev = display_0_expected;
	display_1_expected_prev = display_1_expected;
	display_2_expected_prev = display_2_expected;
	display_3_expected_prev = display_3_expected;
	display_4_expected_prev = display_4_expected;
	display_5_expected_prev = display_5_expected;
	display_6_expected_prev = display_6_expected;
	display_7_expected_prev = display_7_expected;
	flag_write_expected_prev = flag_write_expected;
	test0_expected_prev = test0_expected;
	test1_expected_prev = test1_expected;
	test2_expected_prev = test2_expected;
	test3_expected_prev = test3_expected;
end


// expected display_0[ 6 ]
initial
begin
	display_0_expected[6] = 1'bX;
end 
// expected display_0[ 5 ]
initial
begin
	display_0_expected[5] = 1'bX;
end 
// expected display_0[ 4 ]
initial
begin
	display_0_expected[4] = 1'bX;
end 
// expected display_0[ 3 ]
initial
begin
	display_0_expected[3] = 1'bX;
end 
// expected display_0[ 2 ]
initial
begin
	display_0_expected[2] = 1'bX;
end 
// expected display_0[ 1 ]
initial
begin
	display_0_expected[1] = 1'bX;
end 
// expected display_0[ 0 ]
initial
begin
	display_0_expected[0] = 1'bX;
end 
// expected display_1[ 6 ]
initial
begin
	display_1_expected[6] = 1'bX;
end 
// expected display_1[ 5 ]
initial
begin
	display_1_expected[5] = 1'bX;
end 
// expected display_1[ 4 ]
initial
begin
	display_1_expected[4] = 1'bX;
end 
// expected display_1[ 3 ]
initial
begin
	display_1_expected[3] = 1'bX;
end 
// expected display_1[ 2 ]
initial
begin
	display_1_expected[2] = 1'bX;
end 
// expected display_1[ 1 ]
initial
begin
	display_1_expected[1] = 1'bX;
end 
// expected display_1[ 0 ]
initial
begin
	display_1_expected[0] = 1'bX;
end 
// expected display_2[ 6 ]
initial
begin
	display_2_expected[6] = 1'bX;
end 
// expected display_2[ 5 ]
initial
begin
	display_2_expected[5] = 1'bX;
end 
// expected display_2[ 4 ]
initial
begin
	display_2_expected[4] = 1'bX;
end 
// expected display_2[ 3 ]
initial
begin
	display_2_expected[3] = 1'bX;
end 
// expected display_2[ 2 ]
initial
begin
	display_2_expected[2] = 1'bX;
end 
// expected display_2[ 1 ]
initial
begin
	display_2_expected[1] = 1'bX;
end 
// expected display_2[ 0 ]
initial
begin
	display_2_expected[0] = 1'bX;
end 
// expected display_3[ 6 ]
initial
begin
	display_3_expected[6] = 1'bX;
end 
// expected display_3[ 5 ]
initial
begin
	display_3_expected[5] = 1'bX;
end 
// expected display_3[ 4 ]
initial
begin
	display_3_expected[4] = 1'bX;
end 
// expected display_3[ 3 ]
initial
begin
	display_3_expected[3] = 1'bX;
end 
// expected display_3[ 2 ]
initial
begin
	display_3_expected[2] = 1'bX;
end 
// expected display_3[ 1 ]
initial
begin
	display_3_expected[1] = 1'bX;
end 
// expected display_3[ 0 ]
initial
begin
	display_3_expected[0] = 1'bX;
end 
// expected display_4[ 6 ]
initial
begin
	display_4_expected[6] = 1'bX;
end 
// expected display_4[ 5 ]
initial
begin
	display_4_expected[5] = 1'bX;
end 
// expected display_4[ 4 ]
initial
begin
	display_4_expected[4] = 1'bX;
end 
// expected display_4[ 3 ]
initial
begin
	display_4_expected[3] = 1'bX;
end 
// expected display_4[ 2 ]
initial
begin
	display_4_expected[2] = 1'bX;
end 
// expected display_4[ 1 ]
initial
begin
	display_4_expected[1] = 1'bX;
end 
// expected display_4[ 0 ]
initial
begin
	display_4_expected[0] = 1'bX;
end 
// expected display_5[ 6 ]
initial
begin
	display_5_expected[6] = 1'bX;
end 
// expected display_5[ 5 ]
initial
begin
	display_5_expected[5] = 1'bX;
end 
// expected display_5[ 4 ]
initial
begin
	display_5_expected[4] = 1'bX;
end 
// expected display_5[ 3 ]
initial
begin
	display_5_expected[3] = 1'bX;
end 
// expected display_5[ 2 ]
initial
begin
	display_5_expected[2] = 1'bX;
end 
// expected display_5[ 1 ]
initial
begin
	display_5_expected[1] = 1'bX;
end 
// expected display_5[ 0 ]
initial
begin
	display_5_expected[0] = 1'bX;
end 
// expected display_6[ 6 ]
initial
begin
	display_6_expected[6] = 1'bX;
end 
// expected display_6[ 5 ]
initial
begin
	display_6_expected[5] = 1'bX;
end 
// expected display_6[ 4 ]
initial
begin
	display_6_expected[4] = 1'bX;
end 
// expected display_6[ 3 ]
initial
begin
	display_6_expected[3] = 1'bX;
end 
// expected display_6[ 2 ]
initial
begin
	display_6_expected[2] = 1'bX;
end 
// expected display_6[ 1 ]
initial
begin
	display_6_expected[1] = 1'bX;
end 
// expected display_6[ 0 ]
initial
begin
	display_6_expected[0] = 1'bX;
end 
// expected display_7[ 6 ]
initial
begin
	display_7_expected[6] = 1'bX;
end 
// expected display_7[ 5 ]
initial
begin
	display_7_expected[5] = 1'bX;
end 
// expected display_7[ 4 ]
initial
begin
	display_7_expected[4] = 1'bX;
end 
// expected display_7[ 3 ]
initial
begin
	display_7_expected[3] = 1'bX;
end 
// expected display_7[ 2 ]
initial
begin
	display_7_expected[2] = 1'bX;
end 
// expected display_7[ 1 ]
initial
begin
	display_7_expected[1] = 1'bX;
end 
// expected display_7[ 0 ]
initial
begin
	display_7_expected[0] = 1'bX;
end 
// expected test0[ 31 ]
initial
begin
	test0_expected[31] = 1'bX;
end 
// expected test0[ 30 ]
initial
begin
	test0_expected[30] = 1'bX;
end 
// expected test0[ 29 ]
initial
begin
	test0_expected[29] = 1'bX;
end 
// expected test0[ 28 ]
initial
begin
	test0_expected[28] = 1'bX;
end 
// expected test0[ 27 ]
initial
begin
	test0_expected[27] = 1'bX;
end 
// expected test0[ 26 ]
initial
begin
	test0_expected[26] = 1'bX;
end 
// expected test0[ 25 ]
initial
begin
	test0_expected[25] = 1'bX;
end 
// expected test0[ 24 ]
initial
begin
	test0_expected[24] = 1'bX;
end 
// expected test0[ 23 ]
initial
begin
	test0_expected[23] = 1'bX;
end 
// expected test0[ 22 ]
initial
begin
	test0_expected[22] = 1'bX;
end 
// expected test0[ 21 ]
initial
begin
	test0_expected[21] = 1'bX;
end 
// expected test0[ 20 ]
initial
begin
	test0_expected[20] = 1'bX;
end 
// expected test0[ 19 ]
initial
begin
	test0_expected[19] = 1'bX;
end 
// expected test0[ 18 ]
initial
begin
	test0_expected[18] = 1'bX;
end 
// expected test0[ 17 ]
initial
begin
	test0_expected[17] = 1'bX;
end 
// expected test0[ 16 ]
initial
begin
	test0_expected[16] = 1'bX;
end 
// expected test0[ 15 ]
initial
begin
	test0_expected[15] = 1'bX;
end 
// expected test0[ 14 ]
initial
begin
	test0_expected[14] = 1'bX;
end 
// expected test0[ 13 ]
initial
begin
	test0_expected[13] = 1'bX;
end 
// expected test0[ 12 ]
initial
begin
	test0_expected[12] = 1'bX;
end 
// expected test0[ 11 ]
initial
begin
	test0_expected[11] = 1'bX;
end 
// expected test0[ 10 ]
initial
begin
	test0_expected[10] = 1'bX;
end 
// expected test0[ 9 ]
initial
begin
	test0_expected[9] = 1'bX;
end 
// expected test0[ 8 ]
initial
begin
	test0_expected[8] = 1'bX;
end 
// expected test0[ 7 ]
initial
begin
	test0_expected[7] = 1'bX;
end 
// expected test0[ 6 ]
initial
begin
	test0_expected[6] = 1'bX;
end 
// expected test0[ 5 ]
initial
begin
	test0_expected[5] = 1'bX;
end 
// expected test0[ 4 ]
initial
begin
	test0_expected[4] = 1'bX;
end 
// expected test0[ 3 ]
initial
begin
	test0_expected[3] = 1'bX;
end 
// expected test0[ 2 ]
initial
begin
	test0_expected[2] = 1'bX;
end 
// expected test0[ 1 ]
initial
begin
	test0_expected[1] = 1'bX;
end 
// expected test0[ 0 ]
initial
begin
	test0_expected[0] = 1'bX;
end 
// expected test1[ 31 ]
initial
begin
	test1_expected[31] = 1'bX;
end 
// expected test1[ 30 ]
initial
begin
	test1_expected[30] = 1'bX;
end 
// expected test1[ 29 ]
initial
begin
	test1_expected[29] = 1'bX;
end 
// expected test1[ 28 ]
initial
begin
	test1_expected[28] = 1'bX;
end 
// expected test1[ 27 ]
initial
begin
	test1_expected[27] = 1'bX;
end 
// expected test1[ 26 ]
initial
begin
	test1_expected[26] = 1'bX;
end 
// expected test1[ 25 ]
initial
begin
	test1_expected[25] = 1'bX;
end 
// expected test1[ 24 ]
initial
begin
	test1_expected[24] = 1'bX;
end 
// expected test1[ 23 ]
initial
begin
	test1_expected[23] = 1'bX;
end 
// expected test1[ 22 ]
initial
begin
	test1_expected[22] = 1'bX;
end 
// expected test1[ 21 ]
initial
begin
	test1_expected[21] = 1'bX;
end 
// expected test1[ 20 ]
initial
begin
	test1_expected[20] = 1'bX;
end 
// expected test1[ 19 ]
initial
begin
	test1_expected[19] = 1'bX;
end 
// expected test1[ 18 ]
initial
begin
	test1_expected[18] = 1'bX;
end 
// expected test1[ 17 ]
initial
begin
	test1_expected[17] = 1'bX;
end 
// expected test1[ 16 ]
initial
begin
	test1_expected[16] = 1'bX;
end 
// expected test1[ 15 ]
initial
begin
	test1_expected[15] = 1'bX;
end 
// expected test1[ 14 ]
initial
begin
	test1_expected[14] = 1'bX;
end 
// expected test1[ 13 ]
initial
begin
	test1_expected[13] = 1'bX;
end 
// expected test1[ 12 ]
initial
begin
	test1_expected[12] = 1'bX;
end 
// expected test1[ 11 ]
initial
begin
	test1_expected[11] = 1'bX;
end 
// expected test1[ 10 ]
initial
begin
	test1_expected[10] = 1'bX;
end 
// expected test1[ 9 ]
initial
begin
	test1_expected[9] = 1'bX;
end 
// expected test1[ 8 ]
initial
begin
	test1_expected[8] = 1'bX;
end 
// expected test1[ 7 ]
initial
begin
	test1_expected[7] = 1'bX;
end 
// expected test1[ 6 ]
initial
begin
	test1_expected[6] = 1'bX;
end 
// expected test1[ 5 ]
initial
begin
	test1_expected[5] = 1'bX;
end 
// expected test1[ 4 ]
initial
begin
	test1_expected[4] = 1'bX;
end 
// expected test1[ 3 ]
initial
begin
	test1_expected[3] = 1'bX;
end 
// expected test1[ 2 ]
initial
begin
	test1_expected[2] = 1'bX;
end 
// expected test1[ 1 ]
initial
begin
	test1_expected[1] = 1'bX;
end 
// expected test1[ 0 ]
initial
begin
	test1_expected[0] = 1'bX;
end 
// expected test2[ 31 ]
initial
begin
	test2_expected[31] = 1'bX;
end 
// expected test2[ 30 ]
initial
begin
	test2_expected[30] = 1'bX;
end 
// expected test2[ 29 ]
initial
begin
	test2_expected[29] = 1'bX;
end 
// expected test2[ 28 ]
initial
begin
	test2_expected[28] = 1'bX;
end 
// expected test2[ 27 ]
initial
begin
	test2_expected[27] = 1'bX;
end 
// expected test2[ 26 ]
initial
begin
	test2_expected[26] = 1'bX;
end 
// expected test2[ 25 ]
initial
begin
	test2_expected[25] = 1'bX;
end 
// expected test2[ 24 ]
initial
begin
	test2_expected[24] = 1'bX;
end 
// expected test2[ 23 ]
initial
begin
	test2_expected[23] = 1'bX;
end 
// expected test2[ 22 ]
initial
begin
	test2_expected[22] = 1'bX;
end 
// expected test2[ 21 ]
initial
begin
	test2_expected[21] = 1'bX;
end 
// expected test2[ 20 ]
initial
begin
	test2_expected[20] = 1'bX;
end 
// expected test2[ 19 ]
initial
begin
	test2_expected[19] = 1'bX;
end 
// expected test2[ 18 ]
initial
begin
	test2_expected[18] = 1'bX;
end 
// expected test2[ 17 ]
initial
begin
	test2_expected[17] = 1'bX;
end 
// expected test2[ 16 ]
initial
begin
	test2_expected[16] = 1'bX;
end 
// expected test2[ 15 ]
initial
begin
	test2_expected[15] = 1'bX;
end 
// expected test2[ 14 ]
initial
begin
	test2_expected[14] = 1'bX;
end 
// expected test2[ 13 ]
initial
begin
	test2_expected[13] = 1'bX;
end 
// expected test2[ 12 ]
initial
begin
	test2_expected[12] = 1'bX;
end 
// expected test2[ 11 ]
initial
begin
	test2_expected[11] = 1'bX;
end 
// expected test2[ 10 ]
initial
begin
	test2_expected[10] = 1'bX;
end 
// expected test2[ 9 ]
initial
begin
	test2_expected[9] = 1'bX;
end 
// expected test2[ 8 ]
initial
begin
	test2_expected[8] = 1'bX;
end 
// expected test2[ 7 ]
initial
begin
	test2_expected[7] = 1'bX;
end 
// expected test2[ 6 ]
initial
begin
	test2_expected[6] = 1'bX;
end 
// expected test2[ 5 ]
initial
begin
	test2_expected[5] = 1'bX;
end 
// expected test2[ 4 ]
initial
begin
	test2_expected[4] = 1'bX;
end 
// expected test2[ 3 ]
initial
begin
	test2_expected[3] = 1'bX;
end 
// expected test2[ 2 ]
initial
begin
	test2_expected[2] = 1'bX;
end 
// expected test2[ 1 ]
initial
begin
	test2_expected[1] = 1'bX;
end 
// expected test2[ 0 ]
initial
begin
	test2_expected[0] = 1'bX;
end 
// expected test3[ 31 ]
initial
begin
	test3_expected[31] = 1'bX;
end 
// expected test3[ 30 ]
initial
begin
	test3_expected[30] = 1'bX;
end 
// expected test3[ 29 ]
initial
begin
	test3_expected[29] = 1'bX;
end 
// expected test3[ 28 ]
initial
begin
	test3_expected[28] = 1'bX;
end 
// expected test3[ 27 ]
initial
begin
	test3_expected[27] = 1'bX;
end 
// expected test3[ 26 ]
initial
begin
	test3_expected[26] = 1'bX;
end 
// expected test3[ 25 ]
initial
begin
	test3_expected[25] = 1'bX;
end 
// expected test3[ 24 ]
initial
begin
	test3_expected[24] = 1'bX;
end 
// expected test3[ 23 ]
initial
begin
	test3_expected[23] = 1'bX;
end 
// expected test3[ 22 ]
initial
begin
	test3_expected[22] = 1'bX;
end 
// expected test3[ 21 ]
initial
begin
	test3_expected[21] = 1'bX;
end 
// expected test3[ 20 ]
initial
begin
	test3_expected[20] = 1'bX;
end 
// expected test3[ 19 ]
initial
begin
	test3_expected[19] = 1'bX;
end 
// expected test3[ 18 ]
initial
begin
	test3_expected[18] = 1'bX;
end 
// expected test3[ 17 ]
initial
begin
	test3_expected[17] = 1'bX;
end 
// expected test3[ 16 ]
initial
begin
	test3_expected[16] = 1'bX;
end 
// expected test3[ 15 ]
initial
begin
	test3_expected[15] = 1'bX;
end 
// expected test3[ 14 ]
initial
begin
	test3_expected[14] = 1'bX;
end 
// expected test3[ 13 ]
initial
begin
	test3_expected[13] = 1'bX;
end 
// expected test3[ 12 ]
initial
begin
	test3_expected[12] = 1'bX;
end 
// expected test3[ 11 ]
initial
begin
	test3_expected[11] = 1'bX;
end 
// expected test3[ 10 ]
initial
begin
	test3_expected[10] = 1'bX;
end 
// expected test3[ 9 ]
initial
begin
	test3_expected[9] = 1'bX;
end 
// expected test3[ 8 ]
initial
begin
	test3_expected[8] = 1'bX;
end 
// expected test3[ 7 ]
initial
begin
	test3_expected[7] = 1'bX;
end 
// expected test3[ 6 ]
initial
begin
	test3_expected[6] = 1'bX;
end 
// expected test3[ 5 ]
initial
begin
	test3_expected[5] = 1'bX;
end 
// expected test3[ 4 ]
initial
begin
	test3_expected[4] = 1'bX;
end 
// expected test3[ 3 ]
initial
begin
	test3_expected[3] = 1'bX;
end 
// expected test3[ 2 ]
initial
begin
	test3_expected[2] = 1'bX;
end 
// expected test3[ 1 ]
initial
begin
	test3_expected[1] = 1'bX;
end 
// expected test3[ 0 ]
initial
begin
	test3_expected[0] = 1'bX;
end 

// expected flag_write
initial
begin
	flag_write_expected = 1'bX;
end 
// generate trigger
always @(display_0_expected or display_0 or display_1_expected or display_1 or display_2_expected or display_2 or display_3_expected or display_3 or display_4_expected or display_4 or display_5_expected or display_5 or display_6_expected or display_6 or display_7_expected or display_7 or flag_write_expected or flag_write or test0_expected or test0 or test1_expected or test1 or test2_expected or test2 or test3_expected or test3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display_0 = %b | expected display_1 = %b | expected display_2 = %b | expected display_3 = %b | expected display_4 = %b | expected display_5 = %b | expected display_6 = %b | expected display_7 = %b | expected flag_write = %b | expected test0 = %b | expected test1 = %b | expected test2 = %b | expected test3 = %b | ",display_0_expected_prev,display_1_expected_prev,display_2_expected_prev,display_3_expected_prev,display_4_expected_prev,display_5_expected_prev,display_6_expected_prev,display_7_expected_prev,flag_write_expected_prev,test0_expected_prev,test1_expected_prev,test2_expected_prev,test3_expected_prev);
	$display("| real display_0 = %b | real display_1 = %b | real display_2 = %b | real display_3 = %b | real display_4 = %b | real display_5 = %b | real display_6 = %b | real display_7 = %b | real flag_write = %b | real test0 = %b | real test1 = %b | real test2 = %b | real test3 = %b | ",display_0_prev,display_1_prev,display_2_prev,display_3_prev,display_4_prev,display_5_prev,display_6_prev,display_7_prev,flag_write_prev,test0_prev,test1_prev,test2_prev,test3_prev);
`endif
	if (
		( display_0_expected_prev[0] !== 1'bx ) && ( display_0_prev[0] !== display_0_expected_prev[0] )
		&& ((display_0_expected_prev[0] !== last_display_0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_0_expected_prev);
		$display ("     Real value = %b", display_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_0_exp[0] = display_0_expected_prev[0];
	end
	if (
		( display_0_expected_prev[1] !== 1'bx ) && ( display_0_prev[1] !== display_0_expected_prev[1] )
		&& ((display_0_expected_prev[1] !== last_display_0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_0_expected_prev);
		$display ("     Real value = %b", display_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_0_exp[1] = display_0_expected_prev[1];
	end
	if (
		( display_0_expected_prev[2] !== 1'bx ) && ( display_0_prev[2] !== display_0_expected_prev[2] )
		&& ((display_0_expected_prev[2] !== last_display_0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_0_expected_prev);
		$display ("     Real value = %b", display_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_0_exp[2] = display_0_expected_prev[2];
	end
	if (
		( display_0_expected_prev[3] !== 1'bx ) && ( display_0_prev[3] !== display_0_expected_prev[3] )
		&& ((display_0_expected_prev[3] !== last_display_0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_0_expected_prev);
		$display ("     Real value = %b", display_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_0_exp[3] = display_0_expected_prev[3];
	end
	if (
		( display_0_expected_prev[4] !== 1'bx ) && ( display_0_prev[4] !== display_0_expected_prev[4] )
		&& ((display_0_expected_prev[4] !== last_display_0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_0_expected_prev);
		$display ("     Real value = %b", display_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_0_exp[4] = display_0_expected_prev[4];
	end
	if (
		( display_0_expected_prev[5] !== 1'bx ) && ( display_0_prev[5] !== display_0_expected_prev[5] )
		&& ((display_0_expected_prev[5] !== last_display_0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_0_expected_prev);
		$display ("     Real value = %b", display_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_0_exp[5] = display_0_expected_prev[5];
	end
	if (
		( display_0_expected_prev[6] !== 1'bx ) && ( display_0_prev[6] !== display_0_expected_prev[6] )
		&& ((display_0_expected_prev[6] !== last_display_0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_0_expected_prev);
		$display ("     Real value = %b", display_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_0_exp[6] = display_0_expected_prev[6];
	end
	if (
		( display_1_expected_prev[0] !== 1'bx ) && ( display_1_prev[0] !== display_1_expected_prev[0] )
		&& ((display_1_expected_prev[0] !== last_display_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_1_expected_prev);
		$display ("     Real value = %b", display_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_1_exp[0] = display_1_expected_prev[0];
	end
	if (
		( display_1_expected_prev[1] !== 1'bx ) && ( display_1_prev[1] !== display_1_expected_prev[1] )
		&& ((display_1_expected_prev[1] !== last_display_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_1_expected_prev);
		$display ("     Real value = %b", display_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_1_exp[1] = display_1_expected_prev[1];
	end
	if (
		( display_1_expected_prev[2] !== 1'bx ) && ( display_1_prev[2] !== display_1_expected_prev[2] )
		&& ((display_1_expected_prev[2] !== last_display_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_1_expected_prev);
		$display ("     Real value = %b", display_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_1_exp[2] = display_1_expected_prev[2];
	end
	if (
		( display_1_expected_prev[3] !== 1'bx ) && ( display_1_prev[3] !== display_1_expected_prev[3] )
		&& ((display_1_expected_prev[3] !== last_display_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_1_expected_prev);
		$display ("     Real value = %b", display_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_1_exp[3] = display_1_expected_prev[3];
	end
	if (
		( display_1_expected_prev[4] !== 1'bx ) && ( display_1_prev[4] !== display_1_expected_prev[4] )
		&& ((display_1_expected_prev[4] !== last_display_1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_1_expected_prev);
		$display ("     Real value = %b", display_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_1_exp[4] = display_1_expected_prev[4];
	end
	if (
		( display_1_expected_prev[5] !== 1'bx ) && ( display_1_prev[5] !== display_1_expected_prev[5] )
		&& ((display_1_expected_prev[5] !== last_display_1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_1_expected_prev);
		$display ("     Real value = %b", display_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_1_exp[5] = display_1_expected_prev[5];
	end
	if (
		( display_1_expected_prev[6] !== 1'bx ) && ( display_1_prev[6] !== display_1_expected_prev[6] )
		&& ((display_1_expected_prev[6] !== last_display_1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_1_expected_prev);
		$display ("     Real value = %b", display_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_1_exp[6] = display_1_expected_prev[6];
	end
	if (
		( display_2_expected_prev[0] !== 1'bx ) && ( display_2_prev[0] !== display_2_expected_prev[0] )
		&& ((display_2_expected_prev[0] !== last_display_2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_2_expected_prev);
		$display ("     Real value = %b", display_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_2_exp[0] = display_2_expected_prev[0];
	end
	if (
		( display_2_expected_prev[1] !== 1'bx ) && ( display_2_prev[1] !== display_2_expected_prev[1] )
		&& ((display_2_expected_prev[1] !== last_display_2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_2_expected_prev);
		$display ("     Real value = %b", display_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_2_exp[1] = display_2_expected_prev[1];
	end
	if (
		( display_2_expected_prev[2] !== 1'bx ) && ( display_2_prev[2] !== display_2_expected_prev[2] )
		&& ((display_2_expected_prev[2] !== last_display_2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_2_expected_prev);
		$display ("     Real value = %b", display_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_2_exp[2] = display_2_expected_prev[2];
	end
	if (
		( display_2_expected_prev[3] !== 1'bx ) && ( display_2_prev[3] !== display_2_expected_prev[3] )
		&& ((display_2_expected_prev[3] !== last_display_2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_2_expected_prev);
		$display ("     Real value = %b", display_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_2_exp[3] = display_2_expected_prev[3];
	end
	if (
		( display_2_expected_prev[4] !== 1'bx ) && ( display_2_prev[4] !== display_2_expected_prev[4] )
		&& ((display_2_expected_prev[4] !== last_display_2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_2_expected_prev);
		$display ("     Real value = %b", display_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_2_exp[4] = display_2_expected_prev[4];
	end
	if (
		( display_2_expected_prev[5] !== 1'bx ) && ( display_2_prev[5] !== display_2_expected_prev[5] )
		&& ((display_2_expected_prev[5] !== last_display_2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_2_expected_prev);
		$display ("     Real value = %b", display_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_2_exp[5] = display_2_expected_prev[5];
	end
	if (
		( display_2_expected_prev[6] !== 1'bx ) && ( display_2_prev[6] !== display_2_expected_prev[6] )
		&& ((display_2_expected_prev[6] !== last_display_2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_2_expected_prev);
		$display ("     Real value = %b", display_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_2_exp[6] = display_2_expected_prev[6];
	end
	if (
		( display_3_expected_prev[0] !== 1'bx ) && ( display_3_prev[0] !== display_3_expected_prev[0] )
		&& ((display_3_expected_prev[0] !== last_display_3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_3_expected_prev);
		$display ("     Real value = %b", display_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_3_exp[0] = display_3_expected_prev[0];
	end
	if (
		( display_3_expected_prev[1] !== 1'bx ) && ( display_3_prev[1] !== display_3_expected_prev[1] )
		&& ((display_3_expected_prev[1] !== last_display_3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_3_expected_prev);
		$display ("     Real value = %b", display_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_3_exp[1] = display_3_expected_prev[1];
	end
	if (
		( display_3_expected_prev[2] !== 1'bx ) && ( display_3_prev[2] !== display_3_expected_prev[2] )
		&& ((display_3_expected_prev[2] !== last_display_3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_3_expected_prev);
		$display ("     Real value = %b", display_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_3_exp[2] = display_3_expected_prev[2];
	end
	if (
		( display_3_expected_prev[3] !== 1'bx ) && ( display_3_prev[3] !== display_3_expected_prev[3] )
		&& ((display_3_expected_prev[3] !== last_display_3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_3_expected_prev);
		$display ("     Real value = %b", display_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_3_exp[3] = display_3_expected_prev[3];
	end
	if (
		( display_3_expected_prev[4] !== 1'bx ) && ( display_3_prev[4] !== display_3_expected_prev[4] )
		&& ((display_3_expected_prev[4] !== last_display_3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_3_expected_prev);
		$display ("     Real value = %b", display_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_3_exp[4] = display_3_expected_prev[4];
	end
	if (
		( display_3_expected_prev[5] !== 1'bx ) && ( display_3_prev[5] !== display_3_expected_prev[5] )
		&& ((display_3_expected_prev[5] !== last_display_3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_3_expected_prev);
		$display ("     Real value = %b", display_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_3_exp[5] = display_3_expected_prev[5];
	end
	if (
		( display_3_expected_prev[6] !== 1'bx ) && ( display_3_prev[6] !== display_3_expected_prev[6] )
		&& ((display_3_expected_prev[6] !== last_display_3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_3_expected_prev);
		$display ("     Real value = %b", display_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_3_exp[6] = display_3_expected_prev[6];
	end
	if (
		( display_4_expected_prev[0] !== 1'bx ) && ( display_4_prev[0] !== display_4_expected_prev[0] )
		&& ((display_4_expected_prev[0] !== last_display_4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_4_expected_prev);
		$display ("     Real value = %b", display_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display_4_exp[0] = display_4_expected_prev[0];
	end
	if (
		( display_4_expected_prev[1] !== 1'bx ) && ( display_4_prev[1] !== display_4_expected_prev[1] )
		&& ((display_4_expected_prev[1] !== last_display_4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_4_expected_prev);
		$display ("     Real value = %b", display_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display_4_exp[1] = display_4_expected_prev[1];
	end
	if (
		( display_4_expected_prev[2] !== 1'bx ) && ( display_4_prev[2] !== display_4_expected_prev[2] )
		&& ((display_4_expected_prev[2] !== last_display_4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_4_expected_prev);
		$display ("     Real value = %b", display_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display_4_exp[2] = display_4_expected_prev[2];
	end
	if (
		( display_4_expected_prev[3] !== 1'bx ) && ( display_4_prev[3] !== display_4_expected_prev[3] )
		&& ((display_4_expected_prev[3] !== last_display_4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_4_expected_prev);
		$display ("     Real value = %b", display_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display_4_exp[3] = display_4_expected_prev[3];
	end
	if (
		( display_4_expected_prev[4] !== 1'bx ) && ( display_4_prev[4] !== display_4_expected_prev[4] )
		&& ((display_4_expected_prev[4] !== last_display_4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_4_expected_prev);
		$display ("     Real value = %b", display_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display_4_exp[4] = display_4_expected_prev[4];
	end
	if (
		( display_4_expected_prev[5] !== 1'bx ) && ( display_4_prev[5] !== display_4_expected_prev[5] )
		&& ((display_4_expected_prev[5] !== last_display_4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_4_expected_prev);
		$display ("     Real value = %b", display_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display_4_exp[5] = display_4_expected_prev[5];
	end
	if (
		( display_4_expected_prev[6] !== 1'bx ) && ( display_4_prev[6] !== display_4_expected_prev[6] )
		&& ((display_4_expected_prev[6] !== last_display_4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_4_expected_prev);
		$display ("     Real value = %b", display_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display_4_exp[6] = display_4_expected_prev[6];
	end
	if (
		( display_5_expected_prev[0] !== 1'bx ) && ( display_5_prev[0] !== display_5_expected_prev[0] )
		&& ((display_5_expected_prev[0] !== last_display_5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_5_expected_prev);
		$display ("     Real value = %b", display_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_5_exp[0] = display_5_expected_prev[0];
	end
	if (
		( display_5_expected_prev[1] !== 1'bx ) && ( display_5_prev[1] !== display_5_expected_prev[1] )
		&& ((display_5_expected_prev[1] !== last_display_5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_5_expected_prev);
		$display ("     Real value = %b", display_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_5_exp[1] = display_5_expected_prev[1];
	end
	if (
		( display_5_expected_prev[2] !== 1'bx ) && ( display_5_prev[2] !== display_5_expected_prev[2] )
		&& ((display_5_expected_prev[2] !== last_display_5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_5_expected_prev);
		$display ("     Real value = %b", display_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_5_exp[2] = display_5_expected_prev[2];
	end
	if (
		( display_5_expected_prev[3] !== 1'bx ) && ( display_5_prev[3] !== display_5_expected_prev[3] )
		&& ((display_5_expected_prev[3] !== last_display_5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_5_expected_prev);
		$display ("     Real value = %b", display_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_5_exp[3] = display_5_expected_prev[3];
	end
	if (
		( display_5_expected_prev[4] !== 1'bx ) && ( display_5_prev[4] !== display_5_expected_prev[4] )
		&& ((display_5_expected_prev[4] !== last_display_5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_5_expected_prev);
		$display ("     Real value = %b", display_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_5_exp[4] = display_5_expected_prev[4];
	end
	if (
		( display_5_expected_prev[5] !== 1'bx ) && ( display_5_prev[5] !== display_5_expected_prev[5] )
		&& ((display_5_expected_prev[5] !== last_display_5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_5_expected_prev);
		$display ("     Real value = %b", display_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_5_exp[5] = display_5_expected_prev[5];
	end
	if (
		( display_5_expected_prev[6] !== 1'bx ) && ( display_5_prev[6] !== display_5_expected_prev[6] )
		&& ((display_5_expected_prev[6] !== last_display_5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_5_expected_prev);
		$display ("     Real value = %b", display_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_5_exp[6] = display_5_expected_prev[6];
	end
	if (
		( display_6_expected_prev[0] !== 1'bx ) && ( display_6_prev[0] !== display_6_expected_prev[0] )
		&& ((display_6_expected_prev[0] !== last_display_6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_6_expected_prev);
		$display ("     Real value = %b", display_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display_6_exp[0] = display_6_expected_prev[0];
	end
	if (
		( display_6_expected_prev[1] !== 1'bx ) && ( display_6_prev[1] !== display_6_expected_prev[1] )
		&& ((display_6_expected_prev[1] !== last_display_6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_6_expected_prev);
		$display ("     Real value = %b", display_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display_6_exp[1] = display_6_expected_prev[1];
	end
	if (
		( display_6_expected_prev[2] !== 1'bx ) && ( display_6_prev[2] !== display_6_expected_prev[2] )
		&& ((display_6_expected_prev[2] !== last_display_6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_6_expected_prev);
		$display ("     Real value = %b", display_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display_6_exp[2] = display_6_expected_prev[2];
	end
	if (
		( display_6_expected_prev[3] !== 1'bx ) && ( display_6_prev[3] !== display_6_expected_prev[3] )
		&& ((display_6_expected_prev[3] !== last_display_6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_6_expected_prev);
		$display ("     Real value = %b", display_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display_6_exp[3] = display_6_expected_prev[3];
	end
	if (
		( display_6_expected_prev[4] !== 1'bx ) && ( display_6_prev[4] !== display_6_expected_prev[4] )
		&& ((display_6_expected_prev[4] !== last_display_6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_6_expected_prev);
		$display ("     Real value = %b", display_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display_6_exp[4] = display_6_expected_prev[4];
	end
	if (
		( display_6_expected_prev[5] !== 1'bx ) && ( display_6_prev[5] !== display_6_expected_prev[5] )
		&& ((display_6_expected_prev[5] !== last_display_6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_6_expected_prev);
		$display ("     Real value = %b", display_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display_6_exp[5] = display_6_expected_prev[5];
	end
	if (
		( display_6_expected_prev[6] !== 1'bx ) && ( display_6_prev[6] !== display_6_expected_prev[6] )
		&& ((display_6_expected_prev[6] !== last_display_6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_6_expected_prev);
		$display ("     Real value = %b", display_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display_6_exp[6] = display_6_expected_prev[6];
	end
	if (
		( display_7_expected_prev[0] !== 1'bx ) && ( display_7_prev[0] !== display_7_expected_prev[0] )
		&& ((display_7_expected_prev[0] !== last_display_7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_7_expected_prev);
		$display ("     Real value = %b", display_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display_7_exp[0] = display_7_expected_prev[0];
	end
	if (
		( display_7_expected_prev[1] !== 1'bx ) && ( display_7_prev[1] !== display_7_expected_prev[1] )
		&& ((display_7_expected_prev[1] !== last_display_7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_7_expected_prev);
		$display ("     Real value = %b", display_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display_7_exp[1] = display_7_expected_prev[1];
	end
	if (
		( display_7_expected_prev[2] !== 1'bx ) && ( display_7_prev[2] !== display_7_expected_prev[2] )
		&& ((display_7_expected_prev[2] !== last_display_7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_7_expected_prev);
		$display ("     Real value = %b", display_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display_7_exp[2] = display_7_expected_prev[2];
	end
	if (
		( display_7_expected_prev[3] !== 1'bx ) && ( display_7_prev[3] !== display_7_expected_prev[3] )
		&& ((display_7_expected_prev[3] !== last_display_7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_7_expected_prev);
		$display ("     Real value = %b", display_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display_7_exp[3] = display_7_expected_prev[3];
	end
	if (
		( display_7_expected_prev[4] !== 1'bx ) && ( display_7_prev[4] !== display_7_expected_prev[4] )
		&& ((display_7_expected_prev[4] !== last_display_7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_7_expected_prev);
		$display ("     Real value = %b", display_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display_7_exp[4] = display_7_expected_prev[4];
	end
	if (
		( display_7_expected_prev[5] !== 1'bx ) && ( display_7_prev[5] !== display_7_expected_prev[5] )
		&& ((display_7_expected_prev[5] !== last_display_7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_7_expected_prev);
		$display ("     Real value = %b", display_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display_7_exp[5] = display_7_expected_prev[5];
	end
	if (
		( display_7_expected_prev[6] !== 1'bx ) && ( display_7_prev[6] !== display_7_expected_prev[6] )
		&& ((display_7_expected_prev[6] !== last_display_7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_7_expected_prev);
		$display ("     Real value = %b", display_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display_7_exp[6] = display_7_expected_prev[6];
	end
	if (
		( flag_write_expected_prev !== 1'bx ) && ( flag_write_prev !== flag_write_expected_prev )
		&& ((flag_write_expected_prev !== last_flag_write_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag_write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_write_expected_prev);
		$display ("     Real value = %b", flag_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_flag_write_exp = flag_write_expected_prev;
	end
	if (
		( test0_expected_prev[0] !== 1'bx ) && ( test0_prev[0] !== test0_expected_prev[0] )
		&& ((test0_expected_prev[0] !== last_test0_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[0] = test0_expected_prev[0];
	end
	if (
		( test0_expected_prev[1] !== 1'bx ) && ( test0_prev[1] !== test0_expected_prev[1] )
		&& ((test0_expected_prev[1] !== last_test0_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[1] = test0_expected_prev[1];
	end
	if (
		( test0_expected_prev[2] !== 1'bx ) && ( test0_prev[2] !== test0_expected_prev[2] )
		&& ((test0_expected_prev[2] !== last_test0_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[2] = test0_expected_prev[2];
	end
	if (
		( test0_expected_prev[3] !== 1'bx ) && ( test0_prev[3] !== test0_expected_prev[3] )
		&& ((test0_expected_prev[3] !== last_test0_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[3] = test0_expected_prev[3];
	end
	if (
		( test0_expected_prev[4] !== 1'bx ) && ( test0_prev[4] !== test0_expected_prev[4] )
		&& ((test0_expected_prev[4] !== last_test0_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[4] = test0_expected_prev[4];
	end
	if (
		( test0_expected_prev[5] !== 1'bx ) && ( test0_prev[5] !== test0_expected_prev[5] )
		&& ((test0_expected_prev[5] !== last_test0_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[5] = test0_expected_prev[5];
	end
	if (
		( test0_expected_prev[6] !== 1'bx ) && ( test0_prev[6] !== test0_expected_prev[6] )
		&& ((test0_expected_prev[6] !== last_test0_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[6] = test0_expected_prev[6];
	end
	if (
		( test0_expected_prev[7] !== 1'bx ) && ( test0_prev[7] !== test0_expected_prev[7] )
		&& ((test0_expected_prev[7] !== last_test0_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[7] = test0_expected_prev[7];
	end
	if (
		( test0_expected_prev[8] !== 1'bx ) && ( test0_prev[8] !== test0_expected_prev[8] )
		&& ((test0_expected_prev[8] !== last_test0_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[8] = test0_expected_prev[8];
	end
	if (
		( test0_expected_prev[9] !== 1'bx ) && ( test0_prev[9] !== test0_expected_prev[9] )
		&& ((test0_expected_prev[9] !== last_test0_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[9] = test0_expected_prev[9];
	end
	if (
		( test0_expected_prev[10] !== 1'bx ) && ( test0_prev[10] !== test0_expected_prev[10] )
		&& ((test0_expected_prev[10] !== last_test0_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[10] = test0_expected_prev[10];
	end
	if (
		( test0_expected_prev[11] !== 1'bx ) && ( test0_prev[11] !== test0_expected_prev[11] )
		&& ((test0_expected_prev[11] !== last_test0_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[11] = test0_expected_prev[11];
	end
	if (
		( test0_expected_prev[12] !== 1'bx ) && ( test0_prev[12] !== test0_expected_prev[12] )
		&& ((test0_expected_prev[12] !== last_test0_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[12] = test0_expected_prev[12];
	end
	if (
		( test0_expected_prev[13] !== 1'bx ) && ( test0_prev[13] !== test0_expected_prev[13] )
		&& ((test0_expected_prev[13] !== last_test0_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[13] = test0_expected_prev[13];
	end
	if (
		( test0_expected_prev[14] !== 1'bx ) && ( test0_prev[14] !== test0_expected_prev[14] )
		&& ((test0_expected_prev[14] !== last_test0_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[14] = test0_expected_prev[14];
	end
	if (
		( test0_expected_prev[15] !== 1'bx ) && ( test0_prev[15] !== test0_expected_prev[15] )
		&& ((test0_expected_prev[15] !== last_test0_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[15] = test0_expected_prev[15];
	end
	if (
		( test0_expected_prev[16] !== 1'bx ) && ( test0_prev[16] !== test0_expected_prev[16] )
		&& ((test0_expected_prev[16] !== last_test0_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[16] = test0_expected_prev[16];
	end
	if (
		( test0_expected_prev[17] !== 1'bx ) && ( test0_prev[17] !== test0_expected_prev[17] )
		&& ((test0_expected_prev[17] !== last_test0_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[17] = test0_expected_prev[17];
	end
	if (
		( test0_expected_prev[18] !== 1'bx ) && ( test0_prev[18] !== test0_expected_prev[18] )
		&& ((test0_expected_prev[18] !== last_test0_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[18] = test0_expected_prev[18];
	end
	if (
		( test0_expected_prev[19] !== 1'bx ) && ( test0_prev[19] !== test0_expected_prev[19] )
		&& ((test0_expected_prev[19] !== last_test0_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[19] = test0_expected_prev[19];
	end
	if (
		( test0_expected_prev[20] !== 1'bx ) && ( test0_prev[20] !== test0_expected_prev[20] )
		&& ((test0_expected_prev[20] !== last_test0_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[20] = test0_expected_prev[20];
	end
	if (
		( test0_expected_prev[21] !== 1'bx ) && ( test0_prev[21] !== test0_expected_prev[21] )
		&& ((test0_expected_prev[21] !== last_test0_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[21] = test0_expected_prev[21];
	end
	if (
		( test0_expected_prev[22] !== 1'bx ) && ( test0_prev[22] !== test0_expected_prev[22] )
		&& ((test0_expected_prev[22] !== last_test0_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[22] = test0_expected_prev[22];
	end
	if (
		( test0_expected_prev[23] !== 1'bx ) && ( test0_prev[23] !== test0_expected_prev[23] )
		&& ((test0_expected_prev[23] !== last_test0_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[23] = test0_expected_prev[23];
	end
	if (
		( test0_expected_prev[24] !== 1'bx ) && ( test0_prev[24] !== test0_expected_prev[24] )
		&& ((test0_expected_prev[24] !== last_test0_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[24] = test0_expected_prev[24];
	end
	if (
		( test0_expected_prev[25] !== 1'bx ) && ( test0_prev[25] !== test0_expected_prev[25] )
		&& ((test0_expected_prev[25] !== last_test0_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[25] = test0_expected_prev[25];
	end
	if (
		( test0_expected_prev[26] !== 1'bx ) && ( test0_prev[26] !== test0_expected_prev[26] )
		&& ((test0_expected_prev[26] !== last_test0_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[26] = test0_expected_prev[26];
	end
	if (
		( test0_expected_prev[27] !== 1'bx ) && ( test0_prev[27] !== test0_expected_prev[27] )
		&& ((test0_expected_prev[27] !== last_test0_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[27] = test0_expected_prev[27];
	end
	if (
		( test0_expected_prev[28] !== 1'bx ) && ( test0_prev[28] !== test0_expected_prev[28] )
		&& ((test0_expected_prev[28] !== last_test0_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[28] = test0_expected_prev[28];
	end
	if (
		( test0_expected_prev[29] !== 1'bx ) && ( test0_prev[29] !== test0_expected_prev[29] )
		&& ((test0_expected_prev[29] !== last_test0_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[29] = test0_expected_prev[29];
	end
	if (
		( test0_expected_prev[30] !== 1'bx ) && ( test0_prev[30] !== test0_expected_prev[30] )
		&& ((test0_expected_prev[30] !== last_test0_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[30] = test0_expected_prev[30];
	end
	if (
		( test0_expected_prev[31] !== 1'bx ) && ( test0_prev[31] !== test0_expected_prev[31] )
		&& ((test0_expected_prev[31] !== last_test0_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_test0_exp[31] = test0_expected_prev[31];
	end
	if (
		( test1_expected_prev[0] !== 1'bx ) && ( test1_prev[0] !== test1_expected_prev[0] )
		&& ((test1_expected_prev[0] !== last_test1_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[0] = test1_expected_prev[0];
	end
	if (
		( test1_expected_prev[1] !== 1'bx ) && ( test1_prev[1] !== test1_expected_prev[1] )
		&& ((test1_expected_prev[1] !== last_test1_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[1] = test1_expected_prev[1];
	end
	if (
		( test1_expected_prev[2] !== 1'bx ) && ( test1_prev[2] !== test1_expected_prev[2] )
		&& ((test1_expected_prev[2] !== last_test1_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[2] = test1_expected_prev[2];
	end
	if (
		( test1_expected_prev[3] !== 1'bx ) && ( test1_prev[3] !== test1_expected_prev[3] )
		&& ((test1_expected_prev[3] !== last_test1_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[3] = test1_expected_prev[3];
	end
	if (
		( test1_expected_prev[4] !== 1'bx ) && ( test1_prev[4] !== test1_expected_prev[4] )
		&& ((test1_expected_prev[4] !== last_test1_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[4] = test1_expected_prev[4];
	end
	if (
		( test1_expected_prev[5] !== 1'bx ) && ( test1_prev[5] !== test1_expected_prev[5] )
		&& ((test1_expected_prev[5] !== last_test1_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[5] = test1_expected_prev[5];
	end
	if (
		( test1_expected_prev[6] !== 1'bx ) && ( test1_prev[6] !== test1_expected_prev[6] )
		&& ((test1_expected_prev[6] !== last_test1_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[6] = test1_expected_prev[6];
	end
	if (
		( test1_expected_prev[7] !== 1'bx ) && ( test1_prev[7] !== test1_expected_prev[7] )
		&& ((test1_expected_prev[7] !== last_test1_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[7] = test1_expected_prev[7];
	end
	if (
		( test1_expected_prev[8] !== 1'bx ) && ( test1_prev[8] !== test1_expected_prev[8] )
		&& ((test1_expected_prev[8] !== last_test1_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[8] = test1_expected_prev[8];
	end
	if (
		( test1_expected_prev[9] !== 1'bx ) && ( test1_prev[9] !== test1_expected_prev[9] )
		&& ((test1_expected_prev[9] !== last_test1_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[9] = test1_expected_prev[9];
	end
	if (
		( test1_expected_prev[10] !== 1'bx ) && ( test1_prev[10] !== test1_expected_prev[10] )
		&& ((test1_expected_prev[10] !== last_test1_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[10] = test1_expected_prev[10];
	end
	if (
		( test1_expected_prev[11] !== 1'bx ) && ( test1_prev[11] !== test1_expected_prev[11] )
		&& ((test1_expected_prev[11] !== last_test1_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[11] = test1_expected_prev[11];
	end
	if (
		( test1_expected_prev[12] !== 1'bx ) && ( test1_prev[12] !== test1_expected_prev[12] )
		&& ((test1_expected_prev[12] !== last_test1_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[12] = test1_expected_prev[12];
	end
	if (
		( test1_expected_prev[13] !== 1'bx ) && ( test1_prev[13] !== test1_expected_prev[13] )
		&& ((test1_expected_prev[13] !== last_test1_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[13] = test1_expected_prev[13];
	end
	if (
		( test1_expected_prev[14] !== 1'bx ) && ( test1_prev[14] !== test1_expected_prev[14] )
		&& ((test1_expected_prev[14] !== last_test1_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[14] = test1_expected_prev[14];
	end
	if (
		( test1_expected_prev[15] !== 1'bx ) && ( test1_prev[15] !== test1_expected_prev[15] )
		&& ((test1_expected_prev[15] !== last_test1_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[15] = test1_expected_prev[15];
	end
	if (
		( test1_expected_prev[16] !== 1'bx ) && ( test1_prev[16] !== test1_expected_prev[16] )
		&& ((test1_expected_prev[16] !== last_test1_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[16] = test1_expected_prev[16];
	end
	if (
		( test1_expected_prev[17] !== 1'bx ) && ( test1_prev[17] !== test1_expected_prev[17] )
		&& ((test1_expected_prev[17] !== last_test1_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[17] = test1_expected_prev[17];
	end
	if (
		( test1_expected_prev[18] !== 1'bx ) && ( test1_prev[18] !== test1_expected_prev[18] )
		&& ((test1_expected_prev[18] !== last_test1_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[18] = test1_expected_prev[18];
	end
	if (
		( test1_expected_prev[19] !== 1'bx ) && ( test1_prev[19] !== test1_expected_prev[19] )
		&& ((test1_expected_prev[19] !== last_test1_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[19] = test1_expected_prev[19];
	end
	if (
		( test1_expected_prev[20] !== 1'bx ) && ( test1_prev[20] !== test1_expected_prev[20] )
		&& ((test1_expected_prev[20] !== last_test1_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[20] = test1_expected_prev[20];
	end
	if (
		( test1_expected_prev[21] !== 1'bx ) && ( test1_prev[21] !== test1_expected_prev[21] )
		&& ((test1_expected_prev[21] !== last_test1_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[21] = test1_expected_prev[21];
	end
	if (
		( test1_expected_prev[22] !== 1'bx ) && ( test1_prev[22] !== test1_expected_prev[22] )
		&& ((test1_expected_prev[22] !== last_test1_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[22] = test1_expected_prev[22];
	end
	if (
		( test1_expected_prev[23] !== 1'bx ) && ( test1_prev[23] !== test1_expected_prev[23] )
		&& ((test1_expected_prev[23] !== last_test1_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[23] = test1_expected_prev[23];
	end
	if (
		( test1_expected_prev[24] !== 1'bx ) && ( test1_prev[24] !== test1_expected_prev[24] )
		&& ((test1_expected_prev[24] !== last_test1_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[24] = test1_expected_prev[24];
	end
	if (
		( test1_expected_prev[25] !== 1'bx ) && ( test1_prev[25] !== test1_expected_prev[25] )
		&& ((test1_expected_prev[25] !== last_test1_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[25] = test1_expected_prev[25];
	end
	if (
		( test1_expected_prev[26] !== 1'bx ) && ( test1_prev[26] !== test1_expected_prev[26] )
		&& ((test1_expected_prev[26] !== last_test1_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[26] = test1_expected_prev[26];
	end
	if (
		( test1_expected_prev[27] !== 1'bx ) && ( test1_prev[27] !== test1_expected_prev[27] )
		&& ((test1_expected_prev[27] !== last_test1_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[27] = test1_expected_prev[27];
	end
	if (
		( test1_expected_prev[28] !== 1'bx ) && ( test1_prev[28] !== test1_expected_prev[28] )
		&& ((test1_expected_prev[28] !== last_test1_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[28] = test1_expected_prev[28];
	end
	if (
		( test1_expected_prev[29] !== 1'bx ) && ( test1_prev[29] !== test1_expected_prev[29] )
		&& ((test1_expected_prev[29] !== last_test1_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[29] = test1_expected_prev[29];
	end
	if (
		( test1_expected_prev[30] !== 1'bx ) && ( test1_prev[30] !== test1_expected_prev[30] )
		&& ((test1_expected_prev[30] !== last_test1_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[30] = test1_expected_prev[30];
	end
	if (
		( test1_expected_prev[31] !== 1'bx ) && ( test1_prev[31] !== test1_expected_prev[31] )
		&& ((test1_expected_prev[31] !== last_test1_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_test1_exp[31] = test1_expected_prev[31];
	end
	if (
		( test2_expected_prev[0] !== 1'bx ) && ( test2_prev[0] !== test2_expected_prev[0] )
		&& ((test2_expected_prev[0] !== last_test2_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[0] = test2_expected_prev[0];
	end
	if (
		( test2_expected_prev[1] !== 1'bx ) && ( test2_prev[1] !== test2_expected_prev[1] )
		&& ((test2_expected_prev[1] !== last_test2_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[1] = test2_expected_prev[1];
	end
	if (
		( test2_expected_prev[2] !== 1'bx ) && ( test2_prev[2] !== test2_expected_prev[2] )
		&& ((test2_expected_prev[2] !== last_test2_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[2] = test2_expected_prev[2];
	end
	if (
		( test2_expected_prev[3] !== 1'bx ) && ( test2_prev[3] !== test2_expected_prev[3] )
		&& ((test2_expected_prev[3] !== last_test2_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[3] = test2_expected_prev[3];
	end
	if (
		( test2_expected_prev[4] !== 1'bx ) && ( test2_prev[4] !== test2_expected_prev[4] )
		&& ((test2_expected_prev[4] !== last_test2_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[4] = test2_expected_prev[4];
	end
	if (
		( test2_expected_prev[5] !== 1'bx ) && ( test2_prev[5] !== test2_expected_prev[5] )
		&& ((test2_expected_prev[5] !== last_test2_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[5] = test2_expected_prev[5];
	end
	if (
		( test2_expected_prev[6] !== 1'bx ) && ( test2_prev[6] !== test2_expected_prev[6] )
		&& ((test2_expected_prev[6] !== last_test2_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[6] = test2_expected_prev[6];
	end
	if (
		( test2_expected_prev[7] !== 1'bx ) && ( test2_prev[7] !== test2_expected_prev[7] )
		&& ((test2_expected_prev[7] !== last_test2_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[7] = test2_expected_prev[7];
	end
	if (
		( test2_expected_prev[8] !== 1'bx ) && ( test2_prev[8] !== test2_expected_prev[8] )
		&& ((test2_expected_prev[8] !== last_test2_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[8] = test2_expected_prev[8];
	end
	if (
		( test2_expected_prev[9] !== 1'bx ) && ( test2_prev[9] !== test2_expected_prev[9] )
		&& ((test2_expected_prev[9] !== last_test2_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[9] = test2_expected_prev[9];
	end
	if (
		( test2_expected_prev[10] !== 1'bx ) && ( test2_prev[10] !== test2_expected_prev[10] )
		&& ((test2_expected_prev[10] !== last_test2_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[10] = test2_expected_prev[10];
	end
	if (
		( test2_expected_prev[11] !== 1'bx ) && ( test2_prev[11] !== test2_expected_prev[11] )
		&& ((test2_expected_prev[11] !== last_test2_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[11] = test2_expected_prev[11];
	end
	if (
		( test2_expected_prev[12] !== 1'bx ) && ( test2_prev[12] !== test2_expected_prev[12] )
		&& ((test2_expected_prev[12] !== last_test2_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[12] = test2_expected_prev[12];
	end
	if (
		( test2_expected_prev[13] !== 1'bx ) && ( test2_prev[13] !== test2_expected_prev[13] )
		&& ((test2_expected_prev[13] !== last_test2_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[13] = test2_expected_prev[13];
	end
	if (
		( test2_expected_prev[14] !== 1'bx ) && ( test2_prev[14] !== test2_expected_prev[14] )
		&& ((test2_expected_prev[14] !== last_test2_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[14] = test2_expected_prev[14];
	end
	if (
		( test2_expected_prev[15] !== 1'bx ) && ( test2_prev[15] !== test2_expected_prev[15] )
		&& ((test2_expected_prev[15] !== last_test2_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[15] = test2_expected_prev[15];
	end
	if (
		( test2_expected_prev[16] !== 1'bx ) && ( test2_prev[16] !== test2_expected_prev[16] )
		&& ((test2_expected_prev[16] !== last_test2_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[16] = test2_expected_prev[16];
	end
	if (
		( test2_expected_prev[17] !== 1'bx ) && ( test2_prev[17] !== test2_expected_prev[17] )
		&& ((test2_expected_prev[17] !== last_test2_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[17] = test2_expected_prev[17];
	end
	if (
		( test2_expected_prev[18] !== 1'bx ) && ( test2_prev[18] !== test2_expected_prev[18] )
		&& ((test2_expected_prev[18] !== last_test2_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[18] = test2_expected_prev[18];
	end
	if (
		( test2_expected_prev[19] !== 1'bx ) && ( test2_prev[19] !== test2_expected_prev[19] )
		&& ((test2_expected_prev[19] !== last_test2_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[19] = test2_expected_prev[19];
	end
	if (
		( test2_expected_prev[20] !== 1'bx ) && ( test2_prev[20] !== test2_expected_prev[20] )
		&& ((test2_expected_prev[20] !== last_test2_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[20] = test2_expected_prev[20];
	end
	if (
		( test2_expected_prev[21] !== 1'bx ) && ( test2_prev[21] !== test2_expected_prev[21] )
		&& ((test2_expected_prev[21] !== last_test2_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[21] = test2_expected_prev[21];
	end
	if (
		( test2_expected_prev[22] !== 1'bx ) && ( test2_prev[22] !== test2_expected_prev[22] )
		&& ((test2_expected_prev[22] !== last_test2_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[22] = test2_expected_prev[22];
	end
	if (
		( test2_expected_prev[23] !== 1'bx ) && ( test2_prev[23] !== test2_expected_prev[23] )
		&& ((test2_expected_prev[23] !== last_test2_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[23] = test2_expected_prev[23];
	end
	if (
		( test2_expected_prev[24] !== 1'bx ) && ( test2_prev[24] !== test2_expected_prev[24] )
		&& ((test2_expected_prev[24] !== last_test2_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[24] = test2_expected_prev[24];
	end
	if (
		( test2_expected_prev[25] !== 1'bx ) && ( test2_prev[25] !== test2_expected_prev[25] )
		&& ((test2_expected_prev[25] !== last_test2_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[25] = test2_expected_prev[25];
	end
	if (
		( test2_expected_prev[26] !== 1'bx ) && ( test2_prev[26] !== test2_expected_prev[26] )
		&& ((test2_expected_prev[26] !== last_test2_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[26] = test2_expected_prev[26];
	end
	if (
		( test2_expected_prev[27] !== 1'bx ) && ( test2_prev[27] !== test2_expected_prev[27] )
		&& ((test2_expected_prev[27] !== last_test2_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[27] = test2_expected_prev[27];
	end
	if (
		( test2_expected_prev[28] !== 1'bx ) && ( test2_prev[28] !== test2_expected_prev[28] )
		&& ((test2_expected_prev[28] !== last_test2_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[28] = test2_expected_prev[28];
	end
	if (
		( test2_expected_prev[29] !== 1'bx ) && ( test2_prev[29] !== test2_expected_prev[29] )
		&& ((test2_expected_prev[29] !== last_test2_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[29] = test2_expected_prev[29];
	end
	if (
		( test2_expected_prev[30] !== 1'bx ) && ( test2_prev[30] !== test2_expected_prev[30] )
		&& ((test2_expected_prev[30] !== last_test2_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[30] = test2_expected_prev[30];
	end
	if (
		( test2_expected_prev[31] !== 1'bx ) && ( test2_prev[31] !== test2_expected_prev[31] )
		&& ((test2_expected_prev[31] !== last_test2_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_test2_exp[31] = test2_expected_prev[31];
	end
	if (
		( test3_expected_prev[0] !== 1'bx ) && ( test3_prev[0] !== test3_expected_prev[0] )
		&& ((test3_expected_prev[0] !== last_test3_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[0] = test3_expected_prev[0];
	end
	if (
		( test3_expected_prev[1] !== 1'bx ) && ( test3_prev[1] !== test3_expected_prev[1] )
		&& ((test3_expected_prev[1] !== last_test3_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[1] = test3_expected_prev[1];
	end
	if (
		( test3_expected_prev[2] !== 1'bx ) && ( test3_prev[2] !== test3_expected_prev[2] )
		&& ((test3_expected_prev[2] !== last_test3_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[2] = test3_expected_prev[2];
	end
	if (
		( test3_expected_prev[3] !== 1'bx ) && ( test3_prev[3] !== test3_expected_prev[3] )
		&& ((test3_expected_prev[3] !== last_test3_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[3] = test3_expected_prev[3];
	end
	if (
		( test3_expected_prev[4] !== 1'bx ) && ( test3_prev[4] !== test3_expected_prev[4] )
		&& ((test3_expected_prev[4] !== last_test3_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[4] = test3_expected_prev[4];
	end
	if (
		( test3_expected_prev[5] !== 1'bx ) && ( test3_prev[5] !== test3_expected_prev[5] )
		&& ((test3_expected_prev[5] !== last_test3_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[5] = test3_expected_prev[5];
	end
	if (
		( test3_expected_prev[6] !== 1'bx ) && ( test3_prev[6] !== test3_expected_prev[6] )
		&& ((test3_expected_prev[6] !== last_test3_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[6] = test3_expected_prev[6];
	end
	if (
		( test3_expected_prev[7] !== 1'bx ) && ( test3_prev[7] !== test3_expected_prev[7] )
		&& ((test3_expected_prev[7] !== last_test3_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[7] = test3_expected_prev[7];
	end
	if (
		( test3_expected_prev[8] !== 1'bx ) && ( test3_prev[8] !== test3_expected_prev[8] )
		&& ((test3_expected_prev[8] !== last_test3_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[8] = test3_expected_prev[8];
	end
	if (
		( test3_expected_prev[9] !== 1'bx ) && ( test3_prev[9] !== test3_expected_prev[9] )
		&& ((test3_expected_prev[9] !== last_test3_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[9] = test3_expected_prev[9];
	end
	if (
		( test3_expected_prev[10] !== 1'bx ) && ( test3_prev[10] !== test3_expected_prev[10] )
		&& ((test3_expected_prev[10] !== last_test3_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[10] = test3_expected_prev[10];
	end
	if (
		( test3_expected_prev[11] !== 1'bx ) && ( test3_prev[11] !== test3_expected_prev[11] )
		&& ((test3_expected_prev[11] !== last_test3_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[11] = test3_expected_prev[11];
	end
	if (
		( test3_expected_prev[12] !== 1'bx ) && ( test3_prev[12] !== test3_expected_prev[12] )
		&& ((test3_expected_prev[12] !== last_test3_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[12] = test3_expected_prev[12];
	end
	if (
		( test3_expected_prev[13] !== 1'bx ) && ( test3_prev[13] !== test3_expected_prev[13] )
		&& ((test3_expected_prev[13] !== last_test3_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[13] = test3_expected_prev[13];
	end
	if (
		( test3_expected_prev[14] !== 1'bx ) && ( test3_prev[14] !== test3_expected_prev[14] )
		&& ((test3_expected_prev[14] !== last_test3_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[14] = test3_expected_prev[14];
	end
	if (
		( test3_expected_prev[15] !== 1'bx ) && ( test3_prev[15] !== test3_expected_prev[15] )
		&& ((test3_expected_prev[15] !== last_test3_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[15] = test3_expected_prev[15];
	end
	if (
		( test3_expected_prev[16] !== 1'bx ) && ( test3_prev[16] !== test3_expected_prev[16] )
		&& ((test3_expected_prev[16] !== last_test3_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[16] = test3_expected_prev[16];
	end
	if (
		( test3_expected_prev[17] !== 1'bx ) && ( test3_prev[17] !== test3_expected_prev[17] )
		&& ((test3_expected_prev[17] !== last_test3_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[17] = test3_expected_prev[17];
	end
	if (
		( test3_expected_prev[18] !== 1'bx ) && ( test3_prev[18] !== test3_expected_prev[18] )
		&& ((test3_expected_prev[18] !== last_test3_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[18] = test3_expected_prev[18];
	end
	if (
		( test3_expected_prev[19] !== 1'bx ) && ( test3_prev[19] !== test3_expected_prev[19] )
		&& ((test3_expected_prev[19] !== last_test3_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[19] = test3_expected_prev[19];
	end
	if (
		( test3_expected_prev[20] !== 1'bx ) && ( test3_prev[20] !== test3_expected_prev[20] )
		&& ((test3_expected_prev[20] !== last_test3_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[20] = test3_expected_prev[20];
	end
	if (
		( test3_expected_prev[21] !== 1'bx ) && ( test3_prev[21] !== test3_expected_prev[21] )
		&& ((test3_expected_prev[21] !== last_test3_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[21] = test3_expected_prev[21];
	end
	if (
		( test3_expected_prev[22] !== 1'bx ) && ( test3_prev[22] !== test3_expected_prev[22] )
		&& ((test3_expected_prev[22] !== last_test3_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[22] = test3_expected_prev[22];
	end
	if (
		( test3_expected_prev[23] !== 1'bx ) && ( test3_prev[23] !== test3_expected_prev[23] )
		&& ((test3_expected_prev[23] !== last_test3_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[23] = test3_expected_prev[23];
	end
	if (
		( test3_expected_prev[24] !== 1'bx ) && ( test3_prev[24] !== test3_expected_prev[24] )
		&& ((test3_expected_prev[24] !== last_test3_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[24] = test3_expected_prev[24];
	end
	if (
		( test3_expected_prev[25] !== 1'bx ) && ( test3_prev[25] !== test3_expected_prev[25] )
		&& ((test3_expected_prev[25] !== last_test3_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[25] = test3_expected_prev[25];
	end
	if (
		( test3_expected_prev[26] !== 1'bx ) && ( test3_prev[26] !== test3_expected_prev[26] )
		&& ((test3_expected_prev[26] !== last_test3_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[26] = test3_expected_prev[26];
	end
	if (
		( test3_expected_prev[27] !== 1'bx ) && ( test3_prev[27] !== test3_expected_prev[27] )
		&& ((test3_expected_prev[27] !== last_test3_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[27] = test3_expected_prev[27];
	end
	if (
		( test3_expected_prev[28] !== 1'bx ) && ( test3_prev[28] !== test3_expected_prev[28] )
		&& ((test3_expected_prev[28] !== last_test3_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[28] = test3_expected_prev[28];
	end
	if (
		( test3_expected_prev[29] !== 1'bx ) && ( test3_prev[29] !== test3_expected_prev[29] )
		&& ((test3_expected_prev[29] !== last_test3_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[29] = test3_expected_prev[29];
	end
	if (
		( test3_expected_prev[30] !== 1'bx ) && ( test3_prev[30] !== test3_expected_prev[30] )
		&& ((test3_expected_prev[30] !== last_test3_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[30] = test3_expected_prev[30];
	end
	if (
		( test3_expected_prev[31] !== 1'bx ) && ( test3_prev[31] !== test3_expected_prev[31] )
		&& ((test3_expected_prev[31] !== last_test3_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_test3_exp[31] = test3_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processing_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_clock;
reg clock_50;
reg reset;
reg [17:0] switches;
// wires                                               
wire [6:0] display_0;
wire [6:0] display_1;
wire [6:0] display_2;
wire [6:0] display_3;
wire [6:0] display_4;
wire [6:0] display_5;
wire [6:0] display_6;
wire [6:0] display_7;
wire flag_write;
wire [31:0] test0;
wire [31:0] test1;
wire [31:0] test2;
wire [31:0] test3;

wire sampler;                             

// assign statements (if any)                          
processing_unit i1 (
// port map - connection between master ports and signals/registers   
	.button_clock(button_clock),
	.clock_50(clock_50),
	.display_0(display_0),
	.display_1(display_1),
	.display_2(display_2),
	.display_3(display_3),
	.display_4(display_4),
	.display_5(display_5),
	.display_6(display_6),
	.display_7(display_7),
	.flag_write(flag_write),
	.reset(reset),
	.switches(switches),
	.test0(test0),
	.test1(test1),
	.test2(test2),
	.test3(test3)
);

// reset
initial
begin
	reset = 1'b0;
	reset = #500000 1'b1;
	reset = #170000 1'b0;
end 
// switches[ 17 ]
initial
begin
	switches[17] = 1'b0;
end 
// switches[ 16 ]
initial
begin
	switches[16] = 1'b0;
end 
// switches[ 15 ]
initial
begin
	switches[15] = 1'b0;
end 
// switches[ 14 ]
initial
begin
	switches[14] = 1'b0;
end 
// switches[ 13 ]
initial
begin
	switches[13] = 1'b0;
end 
// switches[ 12 ]
initial
begin
	switches[12] = 1'b0;
end 
// switches[ 11 ]
initial
begin
	switches[11] = 1'b0;
end 
// switches[ 10 ]
initial
begin
	switches[10] = 1'b0;
end 
// switches[ 9 ]
initial
begin
	switches[9] = 1'b0;
end 
// switches[ 8 ]
initial
begin
	switches[8] = 1'b0;
	switches[8] = #280000 1'b1;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
	switches[7] = #280000 1'b1;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
	switches[6] = #280000 1'b1;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
	switches[5] = #280000 1'b1;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
	switches[3] = #280000 1'b1;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
	switches[2] = #280000 1'b1;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 

// clock_50
initial
begin
	clock_50 = 1'b1;
	# 40000;
	repeat(12)
	begin
		clock_50 = 1'b0;
		clock_50 = #40000 1'b1;
		# 40000;
	end
end 

processing_unit_vlg_sample_tst tb_sample (
	.button_clock(button_clock),
	.clock_50(clock_50),
	.reset(reset),
	.switches(switches),
	.sampler_tx(sampler)
);

processing_unit_vlg_check_tst tb_out(
	.display_0(display_0),
	.display_1(display_1),
	.display_2(display_2),
	.display_3(display_3),
	.display_4(display_4),
	.display_5(display_5),
	.display_6(display_6),
	.display_7(display_7),
	.flag_write(flag_write),
	.test0(test0),
	.test1(test1),
	.test2(test2),
	.test3(test3),
	.sampler_rx(sampler)
);
endmodule

